<div id="container"></div>
<script>
  const {
    Agent,
    Environment,
    Terrain,
    CanvasRenderer,
    LineChartRenderer,
    utils,
    Vector,
    Rule
  } = flocc;
  const { Panel, Button, Slider } = window.floccUI;

  utils.seed(1);

  const PERCENT_FULL = 0.59;
  const [width, height] = [600, 600];
  const environment = new Environment({ width, height });
  environment.set("random", true);
  environment.set("count", 10000);
  const renderer = new CanvasRenderer(environment, {
    width,
    height
  });
  renderer.mount("#container");

  const terrain = new Terrain(width / 3, height / 3, { scale: 3 });
  environment.use(terrain);

  const empty = { r: 0, g: 0, b: 0, a: 255 };
  const notOnFire = { r: 0, g: 255, b: 0, a: 255 };
  const onFire = { r: 255, g: 0, b: 0, a: 255 };

  function isOnFire(px) {
    return px.r === 255;
  }

  function isEmpty(x, y) {
    const { r, g } = terrain.sample(x, y);
    return r === 0 && g === 0;
  }

  function isNotEmpty(x, y) {
    return terrain.sample(x, y).g === 255;
  }

  terrain.rule = (x, y) => {
    if (isEmpty(x, y)) return;
    const neighbors = terrain.neighbors(x, y, 1);
    for (let i = 0; i < neighbors.length; i++) {
      if (isOnFire(neighbors[i])) return onFire;
    }
  };

  function setup() {
    terrain.init((x, y) => {
      if (utils.uniform() > PERCENT_FULL) return empty;
      return notOnFire;
    });
    terrain.init((x, y) => {
      if (isNotEmpty(x, y) && x === 0) return onFire;
    });

    new Panel(environment, [
      new Slider({
        name: "count",
        min: 1000,
        max: (width * height) / 2,
        step: 1
      }),
      new Button({
        label() {
          return (
            "Current Regime: " +
            (environment.get("random") ? "Random" : "Uniform")
          );
        },
        onClick() {
          environment.set("random", !environment.get("random"));
        }
      })
    ]);
  }

  function run() {
    const tickOptions = environment.get("random")
      ? { activation: "random", activationCount: environment.get("count") }
      : {};
    environment.tick(tickOptions);
    window.requestAnimationFrame(run);
  }

  setup();
  run();
</script>
